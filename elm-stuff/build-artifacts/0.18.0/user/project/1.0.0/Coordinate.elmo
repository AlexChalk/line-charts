var _user$project$Coordinate$length = F2(
	function (orientation, system) {
		var _p0 = orientation;
		if (_p0.ctor === 'X') {
			return A2(_elm_lang$core$Basics$max, 1, (system.frame.size.width - system.frame.margin.left) - system.frame.margin.right);
		} else {
			return A2(_elm_lang$core$Basics$max, 1, (system.frame.size.height - system.frame.margin.bottom) - system.frame.margin.top);
		}
	});
var _user$project$Coordinate$reach = F2(
	function (orientation, system) {
		var limits = function () {
			var _p1 = orientation;
			if (_p1.ctor === 'X') {
				return system.x;
			} else {
				return system.y;
			}
		}();
		var diff = limits.max - limits.min;
		return (_elm_lang$core$Native_Utils.cmp(diff, 0) > 0) ? diff : 1;
	});
var _user$project$Coordinate$transform = function (transformers) {
	return _elm_lang$svg$Svg_Attributes$transform(
		A2(_elm_lang$core$String$join, ', ', transformers));
};
var _user$project$Coordinate$scaleCartesian = F3(
	function (orientation, system, value) {
		return (value * A2(_user$project$Coordinate$reach, orientation, system)) / A2(_user$project$Coordinate$length, orientation, system);
	});
var _user$project$Coordinate$scaleSVG = F3(
	function (orientation, system, value) {
		return (value * A2(_user$project$Coordinate$length, orientation, system)) / A2(_user$project$Coordinate$reach, orientation, system);
	});
var _user$project$Coordinate$toCartesian = F3(
	function (orientation, system, value) {
		var _p2 = orientation;
		if (_p2.ctor === 'X') {
			return system.x.min + A3(_user$project$Coordinate$scaleCartesian, orientation, system, value - system.frame.margin.left);
		} else {
			return system.y.max - A3(_user$project$Coordinate$scaleCartesian, orientation, system, value - system.frame.margin.top);
		}
	});
var _user$project$Coordinate$toSVG = F3(
	function (orientation, system, value) {
		var _p3 = orientation;
		if (_p3.ctor === 'X') {
			return A3(_user$project$Coordinate$scaleSVG, orientation, system, value - system.x.min) + system.frame.margin.left;
		} else {
			return A3(_user$project$Coordinate$scaleSVG, orientation, system, system.y.max - value) + system.frame.margin.top;
		}
	});
var _user$project$Coordinate$Frame = F2(
	function (a, b) {
		return {margin: a, size: b};
	});
var _user$project$Coordinate$Size = F2(
	function (a, b) {
		return {width: a, height: b};
	});
var _user$project$Coordinate$Margin = F4(
	function (a, b, c, d) {
		return {top: a, right: b, bottom: c, left: d};
	});
var _user$project$Coordinate$Limits = F2(
	function (a, b) {
		return {min: a, max: b};
	});
var _user$project$Coordinate$System = F3(
	function (a, b, c) {
		return {frame: a, x: b, y: c};
	});
var _user$project$Coordinate$Point = F2(
	function (a, b) {
		return {x: a, y: b};
	});
var _user$project$Coordinate$Y = {ctor: 'Y'};
var _user$project$Coordinate$X = {ctor: 'X'};
var _user$project$Coordinate$toSVGPoint = F2(
	function (system, point) {
		return {
			x: A3(_user$project$Coordinate$toSVG, _user$project$Coordinate$X, system, point.x),
			y: A3(_user$project$Coordinate$toSVG, _user$project$Coordinate$Y, system, point.y)
		};
	});
var _user$project$Coordinate$toCartesianPoint = F2(
	function (system, point) {
		return {
			x: A3(_user$project$Coordinate$toCartesian, _user$project$Coordinate$X, system, point.x),
			y: A3(_user$project$Coordinate$toCartesian, _user$project$Coordinate$Y, system, point.y)
		};
	});
var _user$project$Coordinate$translate = F3(
	function (system, x, y) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			'translate(',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(
					A3(_user$project$Coordinate$toSVG, _user$project$Coordinate$X, system, x)),
				A2(
					_elm_lang$core$Basics_ops['++'],
					', ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(
							A3(_user$project$Coordinate$toSVG, _user$project$Coordinate$Y, system, y)),
						')'))));
	});
var _user$project$Coordinate$place = F3(
	function (system, x, y) {
		return _user$project$Coordinate$transform(
			{
				ctor: '::',
				_0: A3(_user$project$Coordinate$translate, system, x, y),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Coordinate$translateWithOffset = F5(
	function (system, x, y, offsetX, offsetY) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			'translate(',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(
					A3(_user$project$Coordinate$toSVG, _user$project$Coordinate$X, system, x) + offsetX),
				A2(
					_elm_lang$core$Basics_ops['++'],
					', ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(
							A3(_user$project$Coordinate$toSVG, _user$project$Coordinate$Y, system, y) + offsetY),
						')'))));
	});
var _user$project$Coordinate$placeWithOffset = F5(
	function (system, x, y, offsetX, offsetY) {
		return _user$project$Coordinate$transform(
			{
				ctor: '::',
				_0: A5(_user$project$Coordinate$translateWithOffset, system, x, y, offsetX, offsetY),
				_1: {ctor: '[]'}
			});
	});
