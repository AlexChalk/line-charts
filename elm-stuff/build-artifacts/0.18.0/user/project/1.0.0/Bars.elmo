var _user$project$Bars$getMaskId = function (_p0) {
	var _p1 = _p0;
	return A2(_elm_lang$core$Basics_ops['++'], 'mask-stripe-', _p1._0.id);
};
var _user$project$Bars$barWidth = F5(
	function (config, system, _p3, _p2, orientation) {
		var _p4 = _p3;
		var _p5 = _p2;
		var fullWidth = function () {
			var _p6 = config.barOrientation;
			if (_p6.ctor === 'Horizontal') {
				return (system.frame.size.height - system.frame.margin.bottom) - system.frame.margin.top;
			} else {
				return (system.frame.size.width - system.frame.margin.left) - system.frame.margin.right;
			}
		}();
		var barWidth = config.barWidth(
			fullWidth / _elm_lang$core$Basics$toFloat(_p4._0));
		return A3(_user$project$Plot_Coordinate$scaleCartesian, orientation, system, barWidth) / _elm_lang$core$Basics$toFloat(_p5._0);
	});
var _user$project$Bars$barOffset = F2(
	function (_p8, _p7) {
		var _p9 = _p8;
		var _p10 = _p7;
		return _elm_lang$core$Basics$toFloat(_p10._0) - (_elm_lang$core$Basics$toFloat(_p9._0) / 2);
	});
var _user$project$Bars$viewSuperscript = F4(
	function (system, _p11, attributes, superscription) {
		var _p12 = _p11;
		var transformation = A5(_user$project$Plot_Coordinate$placeWithOffset, system, _p12.x, _p12.y, superscription.xOffset, superscription.yOffset);
		return A2(
			_elm_lang$svg$Svg$text_,
			{
				ctor: '::',
				_0: transformation,
				_1: A2(_elm_lang$core$Basics_ops['++'], attributes, superscription.attributes)
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$tspan,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg$text(superscription.text),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Bars$viewBarVertical = F8(
	function (config, system, numberOfData, numberOfBars, _p13, barIndex, barConfig, datum) {
		var _p14 = _p13;
		var attributes = A2(
			_elm_lang$core$Basics_ops['++'],
			barConfig.attributes,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill(
					barConfig.color(datum)),
				_1: {ctor: '[]'}
			});
		var width = A5(_user$project$Bars$barWidth, config, system, numberOfData, numberOfBars, _user$project$Plot_Coordinate$X);
		var offset = A2(_user$project$Bars$barOffset, numberOfBars, barIndex);
		var position = _elm_lang$core$Basics$toFloat(_p14._0) + 1;
		var value = barConfig.variable(datum);
		var superscription = A2(
			_elm_lang$core$Maybe$map,
			_user$project$Internal_Utils$apply(value),
			config.barSuperscript);
		var point = {x: position + (width * offset), y: value};
		var commands = A4(_user$project$Internal_Primitives$verticalBarCommands, system, config.barRounding, width, point);
		return A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$class('bar'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A3(_user$project$Internal_Path$view, system, attributes, commands),
				_1: {
					ctor: '::',
					_0: A2(
						_user$project$Internal_Utils$viewMaybe,
						superscription,
						A3(
							_user$project$Bars$viewSuperscript,
							system,
							point,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$style('text-anchor: middle;'),
								_1: {ctor: '[]'}
							})),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Bars$viewBarHorizontal = F8(
	function (config, system, numberOfData, numberOfBars, _p15, barIndex, barConfig, datum) {
		var _p16 = _p15;
		var attributes = A2(
			_elm_lang$core$Basics_ops['++'],
			barConfig.attributes,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill(
					barConfig.color(datum)),
				_1: {ctor: '[]'}
			});
		var width = A5(_user$project$Bars$barWidth, config, system, numberOfData, numberOfBars, _user$project$Plot_Coordinate$Y);
		var offset = A2(_user$project$Bars$barOffset, numberOfBars, barIndex);
		var position = _elm_lang$core$Basics$toFloat(_p16._0) + 1;
		var value = barConfig.variable(datum);
		var superscription = A2(
			_elm_lang$core$Maybe$map,
			_user$project$Internal_Utils$apply(value),
			config.barSuperscript);
		var point = {x: value, y: position - (width * offset)};
		var commands = A4(_user$project$Internal_Primitives$horizontalBarCommands, system, config.barRounding, width, point);
		return A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$class('bar'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A3(_user$project$Internal_Path$view, system, attributes, commands),
				_1: {
					ctor: '::',
					_0: A2(
						_user$project$Internal_Utils$viewMaybe,
						superscription,
						A3(
							_user$project$Bars$viewSuperscript,
							system,
							point,
							{ctor: '[]'})),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Bars$toSystem = F3(
	function (config, data, points) {
		var dependentLimits = {
			min: 0.5,
			max: _elm_lang$core$Basics$toFloat(
				_elm_lang$core$List$length(data)) + 0.5
		};
		var independentLimits = function (toHeight) {
			return {
				min: A2(_user$project$Internal_Coordinate$minimumOrZero, toHeight, points),
				max: A2(_user$project$Internal_Coordinate$maximum, toHeight, points)
			};
		};
		var _p17 = function () {
			var _p18 = config.barOrientation;
			if (_p18.ctor === 'Horizontal') {
				return {
					ctor: '_Tuple2',
					_0: independentLimits(
						function (_) {
							return _.x;
						}),
					_1: dependentLimits
				};
			} else {
				return {
					ctor: '_Tuple2',
					_0: dependentLimits,
					_1: independentLimits(
						function (_) {
							return _.y;
						})
				};
			}
		}();
		var xLimits = _p17._0;
		var yLimits = _p17._1;
		return A3(_user$project$Plot_Coordinate$System, config.container.frame, xLimits, yLimits);
	});
var _user$project$Bars$barPoint = F4(
	function (config, _p19, datum, barConfig) {
		var _p20 = _p19;
		var _p22 = _p20._0;
		var _p21 = config.barOrientation;
		if (_p21.ctor === 'Horizontal') {
			return {
				x: barConfig.variable(datum),
				y: _elm_lang$core$Basics$toFloat(_p22) + 1
			};
		} else {
			return {
				x: _elm_lang$core$Basics$toFloat(_p22) + 1,
				y: barConfig.variable(datum)
			};
		}
	});
var _user$project$Bars$addStripes = F2(
	function (config, attributes) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			attributes,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$mask(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'url(#',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$Bars$getMaskId(config.barTrendPattern),
							')'))),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Bars$axes = F4(
	function (config, axes, system, data) {
		var independentMark = F2(
			function (position, datum) {
				return {
					position: _elm_lang$core$Basics$toFloat(position) + 1,
					tick: axes.independentAxis.tick,
					label: _elm_lang$core$Maybe$Just(
						axes.independentAxis.label(datum))
				};
			});
		var independentAxisLook = function (data) {
			return _elm_lang$core$Native_Utils.update(
				_user$project$Plot_Axis$defaultLook,
				{
					position: _elm_lang$core$Basics$always(0),
					line: axes.independentAxis.line,
					marks: function (_p23) {
						return A2(_elm_lang$core$List$indexedMap, independentMark, data);
					}
				});
		};
		var _p24 = config.barOrientation;
		if (_p24.ctor === 'Horizontal') {
			return {
				ctor: '_Tuple2',
				_0: axes.dependentAxis,
				_1: independentAxisLook(data)
			};
		} else {
			return {
				ctor: '_Tuple2',
				_0: independentAxisLook(data),
				_1: axes.dependentAxis
			};
		}
	});
var _user$project$Bars$viewSvgContainer = F2(
	function (config, system) {
		return _elm_lang$svg$Svg$svg(
			A2(
				_elm_lang$core$List$append,
				A2(_user$project$Internal_Attributes$toSvgAttributes, system, config.container.attributes),
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$width(
						_elm_lang$core$Basics$toString(system.frame.size.width)),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$height(
							_elm_lang$core$Basics$toString(system.frame.size.height)),
						_1: {ctor: '[]'}
					}
				}));
	});
var _user$project$Bars$viewHtmlContainer = F2(
	function (htmlJunk, plot) {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{ctor: '::', _0: plot, _1: htmlJunk});
	});
var _user$project$Bars$defaultIndependentAxis = function (label) {
	return {
		line: _user$project$Plot_Axis$defaultLook.line,
		tick: _elm_lang$core$Maybe$Just(_user$project$Plot_Axis$defaultTick),
		label: label
	};
};
var _user$project$Bars$defaultAxesConfig = function (toLabel) {
	return {
		independentAxis: _user$project$Bars$defaultIndependentAxis(
			function (_p25) {
				return _user$project$Plot_Axis$defaultStringLabel(
					toLabel(_p25));
			}),
		dependentAxis: _user$project$Plot_Axis$defaultLook
	};
};
var _user$project$Bars$Config = F7(
	function (a, b, c, d, e, f, g) {
		return {container: a, junk: b, barWidth: c, barRounding: d, barSuperscript: e, barOrientation: f, barTrendPattern: g};
	});
var _user$project$Bars$Superscript = F4(
	function (a, b, c, d) {
		return {attributes: a, xOffset: b, yOffset: c, text: d};
	});
var _user$project$Bars$AxesConfig = F2(
	function (a, b) {
		return {independentAxis: a, dependentAxis: b};
	});
var _user$project$Bars$IndependentAxisConfig = F3(
	function (a, b, c) {
		return {line: a, tick: b, label: c};
	});
var _user$project$Bars$BarConfigWithTrend = F4(
	function (a, b, c, d) {
		return {color: a, attributes: b, variable: c, trend: d};
	});
var _user$project$Bars$BarConfig = F3(
	function (a, b, c) {
		return {color: a, attributes: b, variable: c};
	});
var _user$project$Bars$toBarConfigs = F2(
	function (config, _p26) {
		var _p27 = _p26;
		var _p29 = _p27._0;
		var _p28 = _p29.trend;
		if (_p28.ctor === 'Just') {
			return {
				ctor: '::',
				_0: A3(_user$project$Bars$BarConfig, _p29.color, _p29.attributes, _p29.variable),
				_1: {
					ctor: '::',
					_0: A3(
						_user$project$Bars$BarConfig,
						_p29.color,
						A2(_user$project$Bars$addStripes, config, _p29.attributes),
						_p28._0),
					_1: {ctor: '[]'}
				}
			};
		} else {
			return {
				ctor: '::',
				_0: A3(_user$project$Bars$BarConfig, _p29.color, _p29.attributes, _p29.variable),
				_1: {ctor: '[]'}
			};
		}
	});
var _user$project$Bars$Horizontal = {ctor: 'Horizontal'};
var _user$project$Bars$Vertical = {ctor: 'Vertical'};
var _user$project$Bars$Pattern = function (a) {
	return {ctor: 'Pattern', _0: a};
};
var _user$project$Bars$pattern = F3(
	function (id, stroke, space) {
		return _user$project$Bars$Pattern(
			{id: id, stroke: stroke, space: space});
	});
var _user$project$Bars$defaultConfig = {
	container: _user$project$Plot_Container$default,
	junk: _user$project$Plot_Junk$none,
	barWidth: function (_p30) {
		return A2(
			_elm_lang$core$Basics$min,
			100,
			A2(
				F2(
					function (x, y) {
						return x * y;
					}),
				0.75,
				_p30));
	},
	barRounding: 0,
	barOrientation: _user$project$Bars$Vertical,
	barSuperscript: _elm_lang$core$Maybe$Nothing,
	barTrendPattern: A3(_user$project$Bars$pattern, 'default-pattern', 2, 3)
};
var _user$project$Bars$defaultDefs = function (_p31) {
	var _p32 = _p31;
	var _p33 = _p32._0;
	var maskId = _user$project$Bars$getMaskId(
		_user$project$Bars$Pattern(_p33));
	var patternId = A2(_elm_lang$core$Basics_ops['++'], 'pattern-stripe-', _p33.id);
	var space = _p33.stroke + _p33.space;
	return {
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$pattern,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$id(patternId),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$patternUnits('userSpaceOnUse'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$width(
							_elm_lang$core$Basics$toString(space)),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$height(
								_elm_lang$core$Basics$toString(space)),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$patternTransform('rotate(45)'),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$rect,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$width(
							_elm_lang$core$Basics$toString(_p33.stroke)),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$height(
								_elm_lang$core$Basics$toString(space)),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$transform('translate(0,0)'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('white'),
									_1: {ctor: '[]'}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$mask,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$id(maskId),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$rect,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$x('0'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$y('0'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$width('100%'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$height('100%'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill(
												A2(
													_elm_lang$core$Basics_ops['++'],
													'url(#',
													A2(_elm_lang$core$Basics_ops['++'], patternId, ')'))),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		}
	};
};
var _user$project$Bars$Bar = function (a) {
	return {ctor: 'Bar', _0: a};
};
var _user$project$Bars$barCustom = F4(
	function (color, attributes, variable, trend) {
		return _user$project$Bars$Bar(
			A4(
				_user$project$Bars$BarConfigWithTrend,
				color,
				attributes,
				variable,
				function () {
					var _p34 = trend;
					if (_p34.ctor === 'NoTrend') {
						return _elm_lang$core$Maybe$Nothing;
					} else {
						return _elm_lang$core$Maybe$Just(_p34._0);
					}
				}()));
	});
var _user$project$Bars$defaultBar = F2(
	function (color, variable) {
		return _user$project$Bars$Bar(
			A4(
				_user$project$Bars$BarConfigWithTrend,
				_elm_lang$core$Basics$always(color),
				{ctor: '[]'},
				variable,
				_elm_lang$core$Maybe$Nothing));
	});
var _user$project$Bars$Trend = function (a) {
	return {ctor: 'Trend', _0: a};
};
var _user$project$Bars$NoTrend = {ctor: 'NoTrend'};
var _user$project$Bars$bar = F2(
	function (color, variable) {
		return A4(
			_user$project$Bars$barCustom,
			_elm_lang$core$Basics$always(color),
			{ctor: '[]'},
			variable,
			_user$project$Bars$NoTrend);
	});
var _user$project$Bars$DatumIndex = function (a) {
	return {ctor: 'DatumIndex', _0: a};
};
var _user$project$Bars$BarIndex = function (a) {
	return {ctor: 'BarIndex', _0: a};
};
var _user$project$Bars$NumberOfData = function (a) {
	return {ctor: 'NumberOfData', _0: a};
};
var _user$project$Bars$NumberOfBars = function (a) {
	return {ctor: 'NumberOfBars', _0: a};
};
var _user$project$Bars$viewGroups = F4(
	function (config, system, barConfigs, data) {
		var viewBarOriented = function () {
			var _p35 = config.barOrientation;
			if (_p35.ctor === 'Horizontal') {
				return _user$project$Bars$viewBarHorizontal;
			} else {
				return _user$project$Bars$viewBarVertical;
			}
		}();
		var numberOfBars = _user$project$Bars$NumberOfBars(
			_elm_lang$core$List$length(barConfigs));
		var numberOfData = _user$project$Bars$NumberOfData(
			_elm_lang$core$List$length(data));
		var viewBar = F4(
			function (datumIndex, datum, barIndex, barConfig) {
				return A8(
					viewBarOriented,
					config,
					system,
					numberOfData,
					numberOfBars,
					_user$project$Bars$DatumIndex(datumIndex),
					_user$project$Bars$BarIndex(barIndex),
					barConfig,
					datum);
			});
		var viewBars = F2(
			function (datumIndex, datum) {
				return A2(
					_elm_lang$svg$Svg$g,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$class('group'),
						_1: {ctor: '[]'}
					},
					A2(
						_elm_lang$core$List$indexedMap,
						A2(viewBar, datumIndex, datum),
						barConfigs));
			});
		return A2(_elm_lang$core$List$indexedMap, viewBars, data);
	});
var _user$project$Bars$viewCustom = F4(
	function (config, axesConfig, bars, data) {
		var defs = A2(
			_elm_lang$core$Basics_ops['++'],
			_user$project$Bars$defaultDefs(config.barTrendPattern),
			config.container.defs);
		var barConfigs = A2(
			_elm_lang$core$List$concatMap,
			_user$project$Bars$toBarConfigs(config),
			bars);
		var barPoints = F2(
			function (datumIndex, datum) {
				return A2(
					_elm_lang$core$List$map,
					A3(
						_user$project$Bars$barPoint,
						config,
						_user$project$Bars$DatumIndex(datumIndex),
						datum),
					barConfigs);
			});
		var allPoints = _elm_lang$core$List$concat(
			A2(_elm_lang$core$List$indexedMap, barPoints, data));
		var system = A3(_user$project$Bars$toSystem, config, data, allPoints);
		var _p36 = A4(_user$project$Bars$axes, config, axesConfig, system, data);
		var horizontalAxis = _p36._0;
		var verticalAxis = _p36._1;
		var junk = A3(_user$project$Internal_Junk$getLayers, config.junk, allPoints, system);
		var groups = A4(_user$project$Bars$viewGroups, config, system, barConfigs, data);
		return A2(
			_user$project$Bars$viewHtmlContainer,
			junk.html,
			A3(
				_user$project$Bars$viewSvgContainer,
				config,
				system,
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$defs,
						{ctor: '[]'},
						defs),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$g,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$class('junk--below'),
								_1: {ctor: '[]'}
							},
							junk.below),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$g,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$class('groups'),
									_1: {ctor: '[]'}
								},
								groups),
							_1: {
								ctor: '::',
								_0: A2(_user$project$Internal_Axis$viewHorizontal, system, horizontalAxis),
								_1: {
									ctor: '::',
									_0: A2(_user$project$Internal_Axis$viewVertical, system, verticalAxis),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$g,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$class('junk--above'),
												_1: {ctor: '[]'}
											},
											junk.above),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}));
	});
var _user$project$Bars$viewSimple = F2(
	function (toLabel, variables) {
		return A3(
			_user$project$Bars$viewCustom,
			_user$project$Bars$defaultConfig,
			_user$project$Bars$defaultAxesConfig(toLabel),
			A3(_elm_lang$core$List$map2, _user$project$Bars$defaultBar, _user$project$Plot_Color$defaults, variables));
	});
var _user$project$Bars$view = function (toLabel) {
	return A2(
		_user$project$Bars$viewCustom,
		_user$project$Bars$defaultConfig,
		_user$project$Bars$defaultAxesConfig(toLabel));
};
