[
  {
    "name": "Lines.Legends",
    "comment": " # Legends\n\n## Quick start\n@docs none, default\n\n## What are my options?\n@docs Legends, Pieces\n\n## Free legends\nThe ones hanging my the line.\n@docs byEnding, byBeginning\n\n## Bucketed legends\nThe ones gathered in one spot.\n@docs bucketed, bucketedCustom\n\n",
    "aliases": [
      {
        "name": "Legends",
        "comment": " ",
        "args": [
          "msg"
        ],
        "type": "Internal.Legends.Legends msg"
      },
      {
        "name": "Pieces",
        "comment": " ",
        "args": [
          "msg"
        ],
        "type": "{ sample : Svg.Svg msg, label : String }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "bucketed",
        "comment": " ",
        "type": "(Lines.Coordinate.Limits -> Float) -> (Lines.Coordinate.Limits -> Float) -> Lines.Legends.Legends msg"
      },
      {
        "name": "bucketedCustom",
        "comment": " ",
        "type": "Float -> (Lines.Coordinate.System -> List (Lines.Legends.Pieces msg) -> Svg.Svg msg) -> Lines.Legends.Legends msg"
      },
      {
        "name": "byBeginning",
        "comment": " ",
        "type": "(String -> Svg.Svg msg) -> Lines.Legends.Legends msg"
      },
      {
        "name": "byEnding",
        "comment": " ",
        "type": "(String -> Svg.Svg msg) -> Lines.Legends.Legends msg"
      },
      {
        "name": "default",
        "comment": " ",
        "type": "Lines.Legends.Legends msg"
      },
      {
        "name": "none",
        "comment": " ",
        "type": "Lines.Legends.Legends msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Lines",
    "comment": "\n\n# Quick start\n@docs view1, view2, view3\n\n# Customize lines\n@docs view, line, dash\n\n# Customize everything\n@docs Config, viewCustom\n\n## Interpolations\n@docs Interpolation, linear, monotone\n\n\n",
    "aliases": [
      {
        "name": "Config",
        "comment": " The customizations available for your line chart viewed with `viewCustom`.\n\n  - `frame` customizes the size and margins of your chart. See `Lines.Coordinate`\n    for more information and examples.\n  - `attributes` allows you to specify SVG attributes to be added to the `svg`\n    element containing your chart.\n  - `events` allows you to add events to your chart, allowing you easily making\n    your chart interactive (adding tooltips, hover startes etc.). See\n    `Lines.Events` for more information and examples.\n  - `junk` gets its name from Edward Tufte's concept of \"chart junk\". Here you\n    are allowed set your creativity free and add whatever SVG or HTML fun you\n    can imagine. Useful when you are the victim of a designer's urge to explore\n    their artistic potential within data visualizing. See `Lines.Junk` for\n    more information and examples. -- TODO joke\n  - `x` allows you to customize the look of your horizontal axis. See\n    `Lines.Axis` for more information and examples.\n  - `y` allows you to customize the look of your vertical axis. See\n    `Lines.Axis` for more information and examples.\n  - `interpolation` allows you to customize the curve of your lines.\n    See the `Interpolation` type for more information and examples.\n  - `legends` allows you to customize your charts legends. See\n    `Lines.Legends` for more information and examples.\n  - `line` allows you to customize your lines' width and color. See\n    `Lines.Line` for more information and examples.\n  - `dot` allows you to customize your dots' size and style. See\n    `Lines.Dot` for more information and examples.\n\n  TODO reorder properties, add links, align examples to run progressively\n\n\nThe default configuration is the following. A good start would be to copy it and\nplay around with customizations available for each property. Again, to be used\nwith `viewCustom`!\n\n    import Lines\n    import Lines.Axis as Axis\n    import Lines.Coordinate exposing (Frame, Margin, Size)\n    import Lines.Dot as Dot\n    import Lines.Events as Events\n    import Lines.Junk as Junk\n    import Lines.Legends as Legends\n    import Lines.Line as Line\n\n    chartConfig : Config data msg\n    chartConfig =\n      { frame = Frame (Margin 40 150 90 150) (Size 650 400)\n      , attributes = []\n      , events = []\n      , junk = Junk.none\n      , x = Axis.default (Axis.defaultTitle \"Age\" 0 0) .age\n      , y = Axis.default (Axis.defaultTitle \"Weight\" 0 0) .weight\n      , interpolation = Lines.linear\n      , legends = Legends.default\n      , line = Line.default\n      , dot = Dot.default\n      }\n\n    chart : Html msg\n    chart =\n      Lines.viewCustom chartConfig\n        [ Lines.line \"red\" Dot.cross \"Alice\" alice\n        , Lines.line \"blue\" Dot.square \"Bob\" bob\n        , Lines.line \"green\" Dot.circle \"Chuck\" chuck\n        ]\n\n",
        "args": [
          "data",
          "msg"
        ],
        "type": "{ frame : Lines.Coordinate.Frame , attributes : List (Svg.Attribute msg) , events : List (Internal.Events.Event data msg) , junk : Lines.Junk.Junk msg , x : Lines.Axis.Axis data msg , y : Lines.Axis.Axis data msg , interpolation : Lines.Interpolation , legends : Internal.Legends.Legends msg , line : Internal.Line.Look data , dot : Internal.Dot.Look data }"
      },
      {
        "name": "Interpolation",
        "comment": " Representes an interpolation (curving of lines).\n",
        "args": [],
        "type": "Internal.Interpolation.Interpolation"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "dash",
        "comment": " Customize a dashed line.\n\nWorks just like `line`, except it takes another argument second to last which\nis and array of floats describing your dashing pattern. See the\n[SVG `stroke-dasharray` documentation](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray)\nfor examples of patterns. Dashed lines are especially good for visualizing\nprocessed data, like averages or predicted values. For example:\n\n    humanChart : Html msg\n    humanChart =\n      Lines.view .age .weight\n        [ Lines.line \"darkslateblue\" Dot.cross \"Alice\" alice\n        , Lines.line \"darkturquoise\" Dot.diamond \"Bob\" bob\n        , Lines.line \"darkgoldenrod\" Dot.triangle \"Chuck\" chuck\n        , Lines.dash \"rebeccapurple\" Dot.none \"Average\" [ 2, 4 ] average\n        ]\n\n_See the full example on Ellie [here](https://ellie-app.com/syMhqfR8qa1/0)._\n\n",
        "type": "Lines.Color.Color -> Internal.Dot.Shape -> String -> List Float -> List data -> Lines.Line data"
      },
      {
        "name": "line",
        "comment": " Customize a solid line.\n\nTry changing the color or explore all the available dot shapes from `Lines.Dot`!\n\n    import Lines\n    import Lines.Dot as Dot\n\n    humanChart : Html msg\n    humanChart =\n      Lines.view .age .weight\n        [ Lines.line \"darkslateblue\" Dot.cross \"Alice\" alice\n        , Lines.line \"darkturquoise\" Dot.diamond \"Bob\" bob\n        , Lines.line \"darkgoldenrod\" Dot.triangle \"Chuck\" chuck\n        ]\n\n_See the full example on Ellie [here](https://ellie-app.com/stWdWjqGZa1/0)._\n\nBesides the color and the dot, you also pass the function a string title and\nthe data for that line. These titles will show up in the legends.\n\nIf you are interested in customizing your legends, dot size or line width,\ncheck out `viewCustom`. For now though, I'd recommend you stick to `view` and\nget your lines right first, and then stepping up the complexity.\n\n ",
        "type": "Lines.Color.Color -> Internal.Dot.Shape -> String -> List data -> Lines.Line data"
      },
      {
        "name": "linear",
        "comment": " A linear interpolation.\n",
        "type": "Lines.Interpolation"
      },
      {
        "name": "monotone",
        "comment": " A monotone-x interpolation.\n",
        "type": "Lines.Interpolation"
      },
      {
        "name": "view",
        "comment": " Show any amount of lines in your chart. Additional customizations of your\nlines are also made available by the use of the function `line`.\n\n    import Lines\n    import Lines.Dot as Dot\n\n    humanChart : Html msg\n    humanChart =\n      Lines.view .age .weight\n        [ Lines.line \"red\" Dot.cross \"Alice\" alice\n        , Lines.line \"blue\" Dot.square \"Bob\" bob\n        , Lines.line \"green\" Dot.circle \"Chuck\" chuck\n        ]\n\n_See the full example on Ellie [here](https://ellie-app.com/sgL9mdF7ra1/1)._\n\n",
        "type": "(data -> Float) -> (data -> Float) -> List (Lines.Line data) -> Svg.Svg msg"
      },
      {
        "name": "view1",
        "comment": " Show a line chart.\n\nFor example, if you want to show a few points, you can display it like this:\n\n    type alias Point =\n      { x : Float, y : Float }\n\n    chart : Html msg\n    chart =\n      Lines.view1 .x .y\n        [ Point 0 2\n        , Point 5 5\n        , Point 10 10\n        ]\n\n_See the example on Ellie [here](https://ellie-app.com/s5M4fxFwGa1/0)._\n\nNotice that we provide `.x` and `.y` to specify which data we want to show.\nSo if we had more complex data points (like a human with an `age`, `weight`,\n`height`, and `income`) we can easily pick which two we want to display:\n\n    aliceChart : Html msg\n    aliceChart =\n      Lines.view1 .age .weight\n        [ Info  4 24 0.94 0\n        , Info 25 75 1.73 25000\n        , Info 43 83 1.75 40000\n        ]\n\n    -- Try changing .weight to .income\n\n_See the example on Ellie [here](https://ellie-app.com/s8kQfLfYZa1/1)._\n\n**Note 1:** Rather than using data like `.weight` directly, you can make a\nfunction like `bmi human = human.weight / human.height ^ 2` and create a\nchart of `.age` vs `bmi`. This allows you to keep your data set nice and minimal!\n\n**Note 2:** `view1` is just a function, so it will adjust as your data changes.\nIf you get more data points or some data points are updated, the chart\nupdates automatically!\n\n",
        "type": "(data -> Float) -> (data -> Float) -> List data -> Svg.Svg msg"
      },
      {
        "name": "view2",
        "comment": " Show a line chart with two data sets.\n\nSay you have two humans and you would like to see how they their weight relates\nto their age, we can display it like this:\n\n    humanChart : Html msg\n    humanChart =\n      Lines.view2 .age .weight alice chuck\n\n_See the full example on Ellie [here](https://ellie-app.com/scTM9Mw77a1/0)._\n\n",
        "type": "(data -> Float) -> (data -> Float) -> List data -> List data -> Svg.Svg msg"
      },
      {
        "name": "view3",
        "comment": " Show a line chart with three data sets. It works just like `view1` and `view2`.\n\n    humanChart : Html msg\n    humanChart =\n      Lines.view3 .age .weight alice bob chuck\n\n_See the full example on Ellie [here](https://ellie-app.com/sdNHxCfrJa1/0)._\n\nBut what if you have more people? What if you have _four_ people?! In that case,\ncheck out `view`.\n",
        "type": "(data -> Float) -> (data -> Float) -> List data -> List data -> List data -> Svg.Svg msg"
      },
      {
        "name": "viewCustom",
        "comment": " Customize your chart. See the `Config` type for information about the\navailable customizations. The following example changes the font color of\nyour chart:\n\n    import Svg.Attributes\n    import Lines\n    import Lines.Axis as Axis\n    import Lines.Coordinate exposing (Frame, Margin, Size)\n    import Lines.Dot as Dot\n    import Lines.Events as Events\n    import Lines.Junk as Junk\n    import Lines.Legends as Legends\n    import Lines.Line as Line\n\n    chartConfig : Config data msg\n    chartConfig =\n      { frame = Frame (Margin 40 150 90 150) (Size 650 400)\n      , attributes =\n          -- Changed from the default!\n          [ Svg.Attributes.style \"fill: darkslategray;\" ]\n      , events = []\n      , junk = Junk.none\n      , x = Axis.default (Axis.defaultTitle \"\" 0 0) .age\n      , y = Axis.default (Axis.defaultTitle \"\" 0 0) .weight\n      , interpolation = Lines.linear\n      , legends = Legends.default\n      , line = Line.default\n      , dot = Dot.default\n      }\n\n    chart : Html msg\n    chart =\n      Lines.viewCustom chartConfig\n        [ Lines.line \"darkslateblue\" Dot.cross \"Alice\" alice\n        , Lines.line \"darkturquoise\" Dot.diamond \"Bob\" bob\n        , Lines.line \"darkgoldenrod\" Dot.triangle \"Chuck\" chuck\n        ]\n\n_See the full example on Ellie [here](https://ellie-app.com/smkVxrpMfa1/0)._\n\n",
        "type": "Lines.Config data msg -> List (Lines.Line data) -> Svg.Svg msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Lines.Line",
    "comment": "\n\n# Line\n\n## Quick start\n@docs default\n\n## Customizing\n@docs Look, Style, wider, static, emphasizable\n\n### Emphasizable helpers\n@docs hasMaybe\n\n",
    "aliases": [
      {
        "name": "Look",
        "comment": " ",
        "args": [
          "data"
        ],
        "type": "Internal.Line.Look data"
      },
      {
        "name": "Style",
        "comment": " ",
        "args": [],
        "type": "Internal.Line.Style"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "default",
        "comment": " ",
        "type": "Lines.Line.Look data"
      },
      {
        "name": "emphasizable",
        "comment": " ",
        "type": "Lines.Line.Style -> Lines.Line.Style -> (List data -> Bool) -> Lines.Line.Look data"
      },
      {
        "name": "hasMaybe",
        "comment": " ",
        "type": "Maybe.Maybe data -> List data -> Bool"
      },
      {
        "name": "static",
        "comment": " ",
        "type": "Lines.Line.Style -> Lines.Line.Look data"
      },
      {
        "name": "wider",
        "comment": " ",
        "type": "Int -> Lines.Line.Look data"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Lines.Junk",
    "comment": "\n\n# Junk\n\n## Quick start\n@docs none\n\n## Custom\n@docs Junk, Layers, custom\n\n## Placing helpers\n@docs Transfrom, transform, move, offset\n\n",
    "aliases": [
      {
        "name": "Junk",
        "comment": " ",
        "args": [
          "msg"
        ],
        "type": "Internal.Junk.Junk msg"
      },
      {
        "name": "Layers",
        "comment": " ",
        "args": [
          "msg"
        ],
        "type": "{ above : List (Svg.Svg msg) , below : List (Svg.Svg msg) , html : List (Html.Html msg) }"
      },
      {
        "name": "Transfrom",
        "comment": " ",
        "args": [],
        "type": "Internal.Svg.Transfrom"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "custom",
        "comment": " ",
        "type": "(Lines.Coordinate.System -> Lines.Junk.Layers msg) -> Lines.Junk.Junk msg"
      },
      {
        "name": "move",
        "comment": " ",
        "type": "Lines.Coordinate.System -> Float -> Float -> Lines.Junk.Transfrom"
      },
      {
        "name": "none",
        "comment": " ",
        "type": "Lines.Junk.Junk msg"
      },
      {
        "name": "offset",
        "comment": " ",
        "type": "Float -> Float -> Lines.Junk.Transfrom"
      },
      {
        "name": "transform",
        "comment": " ",
        "type": "List Lines.Junk.Transfrom -> Svg.Attribute msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Lines.Dot",
    "comment": "\n\n# Dots\n\n## Quick start\nCan't be bothered to figure out about dots right now? I gotcha.\n@docs none\n\n### Easy defaults\n\nThe following defaults are equivalent to `Dot.circle`, `Dot.triangle`, and\n`Dot.cross`, respectivily.\n\n    humanChart : Html msg\n    humanChart =\n      Lines.view .age .weight\n        [ Lines.line \"red\" Dot.default1 \"Alice\" alice\n        , Lines.line \"blue\" Dot.default2 \"Bob\" bob\n        , Lines.line \"green\" Dot.default3 \"Chuck\" chuck\n        ]\n\n@docs default1, default2, default3\n\n## Customizing dot shape\n@docs Shape, circle, triangle, square, diamond, plus, cross\n\n## Customizing dot style\n@docs Look, default, static, emphasizable, isMaybe\n\n### Styles\n@docs Style, full, disconnected, bordered, aura\n\n",
    "aliases": [
      {
        "name": "Look",
        "comment": " ",
        "args": [
          "data"
        ],
        "type": "Internal.Dot.Look data"
      },
      {
        "name": "Shape",
        "comment": " Representes a dot shape.\n\n    humanChart : Html msg\n    humanChart =\n      Lines.view .age .weight\n        [ Lines.line \"red\" Dot.diamond \"Alice\" alice\n        , Lines.line \"blue\" Dot.plus \"Bob\" bob\n        , Lines.line \"green\" Dot.cross \"Chuck\" chuck\n        ]\n\n**Note:** Interested in changing the size and style of the dots? Check out\nthe `Look` type!\n",
        "args": [],
        "type": "Internal.Dot.Shape"
      },
      {
        "name": "Style",
        "comment": " ",
        "args": [],
        "type": "Internal.Dot.Style"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "aura",
        "comment": " ",
        "type": "Int -> Int -> Float -> Lines.Dot.Style"
      },
      {
        "name": "bordered",
        "comment": " ",
        "type": "Int -> Int -> Lines.Dot.Style"
      },
      {
        "name": "circle",
        "comment": " ",
        "type": "Lines.Dot.Shape"
      },
      {
        "name": "cross",
        "comment": " ",
        "type": "Lines.Dot.Shape"
      },
      {
        "name": "default",
        "comment": " ",
        "type": "Lines.Dot.Look data"
      },
      {
        "name": "default1",
        "comment": " ",
        "type": "Lines.Dot.Shape"
      },
      {
        "name": "default2",
        "comment": " ",
        "type": "Lines.Dot.Shape"
      },
      {
        "name": "default3",
        "comment": " ",
        "type": "Lines.Dot.Shape"
      },
      {
        "name": "diamond",
        "comment": " ",
        "type": "Lines.Dot.Shape"
      },
      {
        "name": "disconnected",
        "comment": " ",
        "type": "Int -> Int -> Lines.Dot.Style"
      },
      {
        "name": "emphasizable",
        "comment": " ",
        "type": "Lines.Dot.Style -> Lines.Dot.Style -> (data -> Bool) -> Lines.Dot.Look data"
      },
      {
        "name": "full",
        "comment": " ",
        "type": "Int -> Lines.Dot.Style"
      },
      {
        "name": "isMaybe",
        "comment": " Helper for `emphasizable`. ",
        "type": "Maybe.Maybe data -> data -> Bool"
      },
      {
        "name": "none",
        "comment": " If you don't want a dot at all.\n\n    humanChart : Html msg\n    humanChart =\n      Lines.view .age .weight\n        [ Lines.line \"red\" Dot.none \"Alice\" alice ]\n",
        "type": "Lines.Dot.Shape"
      },
      {
        "name": "plus",
        "comment": " ",
        "type": "Lines.Dot.Shape"
      },
      {
        "name": "square",
        "comment": " ",
        "type": "Lines.Dot.Shape"
      },
      {
        "name": "static",
        "comment": " ",
        "type": "Lines.Dot.Style -> Lines.Dot.Look data"
      },
      {
        "name": "triangle",
        "comment": " ",
        "type": "Lines.Dot.Shape"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Lines.Events",
    "comment": "\n\n# Events\n\n## Quick start\n@docs none, default\n\n## Events\n@docs Event, onClick, onMouseMove, onMouseLeave, on\n\n## Searchers\n@docs Searcher, findNearest, findNearestX, findWithin, findWithinX, cartesian, searcher\n\n",
    "aliases": [
      {
        "name": "Event",
        "comment": " ",
        "args": [
          "data",
          "msg"
        ],
        "type": "Internal.Events.Event data msg"
      },
      {
        "name": "Searcher",
        "comment": " ",
        "args": [
          "data",
          "hint"
        ],
        "type": "Internal.Events.Searcher data hint"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "cartesian",
        "comment": " ",
        "type": "Lines.Events.Searcher data Lines.Coordinate.Point"
      },
      {
        "name": "default",
        "comment": " ",
        "type": "(Maybe.Maybe data -> msg) -> List (Lines.Events.Event data msg)"
      },
      {
        "name": "findNearest",
        "comment": " ",
        "type": "Lines.Events.Searcher data (Maybe.Maybe data)"
      },
      {
        "name": "findNearestX",
        "comment": " ",
        "type": "Lines.Events.Searcher data (List data)"
      },
      {
        "name": "findWithin",
        "comment": " ",
        "type": "Float -> Lines.Events.Searcher data (Maybe.Maybe data)"
      },
      {
        "name": "findWithinX",
        "comment": " ",
        "type": "Float -> Lines.Events.Searcher data (List data)"
      },
      {
        "name": "none",
        "comment": " ",
        "type": "List (Lines.Events.Event data msg)"
      },
      {
        "name": "on",
        "comment": " ",
        "type": "String -> Internal.Events.Searcher data hint -> (hint -> msg) -> Lines.Events.Event data msg"
      },
      {
        "name": "onClick",
        "comment": " ",
        "type": "Internal.Events.Searcher data hint -> (hint -> msg) -> Lines.Events.Event data msg"
      },
      {
        "name": "onMouseLeave",
        "comment": " ",
        "type": "msg -> Lines.Events.Event data msg"
      },
      {
        "name": "onMouseMove",
        "comment": " ",
        "type": "Internal.Events.Searcher data hint -> (hint -> msg) -> Lines.Events.Event data msg"
      },
      {
        "name": "searcher",
        "comment": " ",
        "type": "(Lines.Coordinate.System -> Lines.Coordinate.Point -> hint) -> Lines.Events.Searcher data hint"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Lines.Axis",
    "comment": " # Axis\n\n## Quick start\n@docs default\n\n## What is an axis?\n@docs Axis, Look, Line, Mark, Tick, Direction\n\n## Defaults\n@docs defaultLook, defaultTitle, towardsZero, defaultLine, defaultMark, defaultInterval, customInterval, defaultTick, defaultLabel\n\n",
    "aliases": [
      {
        "name": "Axis",
        "comment": " ",
        "args": [
          "data",
          "msg"
        ],
        "type": "{ look : Lines.Axis.Look msg, variable : data -> Float }"
      },
      {
        "name": "Line",
        "comment": " ",
        "args": [
          "msg"
        ],
        "type": "{ attributes : List (Svg.Attribute msg), start : Float, end : Float }"
      },
      {
        "name": "Look",
        "comment": " ",
        "args": [
          "msg"
        ],
        "type": "{ title : Lines.Axis.Title msg , offset : Float , position : Lines.Coordinate.Limits -> Float , line : Maybe.Maybe (Lines.Coordinate.Limits -> Lines.Axis.Line msg) , marks : Lines.Coordinate.Limits -> List (Lines.Axis.Mark msg) , direction : Lines.Axis.Direction }"
      },
      {
        "name": "Mark",
        "comment": " ",
        "args": [
          "msg"
        ],
        "type": "{ label : Maybe.Maybe (Svg.Svg msg) , tick : Maybe.Maybe (Lines.Axis.Tick msg) , position : Float }"
      },
      {
        "name": "Tick",
        "comment": " ",
        "args": [
          "msg"
        ],
        "type": "{ attributes : List (Svg.Attribute msg), length : Int }"
      }
    ],
    "types": [
      {
        "name": "Direction",
        "comment": " ",
        "args": [],
        "cases": [
          [
            "Negative",
            []
          ],
          [
            "Positive",
            []
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "customInterval",
        "comment": " ",
        "type": "Float -> Float -> Lines.Coordinate.Limits -> List Float"
      },
      {
        "name": "default",
        "comment": " ",
        "type": "Lines.Axis.Title msg -> (data -> Float) -> Lines.Axis.Axis data msg"
      },
      {
        "name": "defaultInterval",
        "comment": " ",
        "type": "Lines.Coordinate.Limits -> List Float"
      },
      {
        "name": "defaultLabel",
        "comment": " ",
        "type": "Float -> Svg.Svg msg"
      },
      {
        "name": "defaultLine",
        "comment": " ",
        "type": "List (Svg.Attribute msg) -> Lines.Coordinate.Limits -> Lines.Axis.Line msg"
      },
      {
        "name": "defaultLook",
        "comment": " ",
        "type": "Lines.Axis.Title msg -> Lines.Axis.Look msg"
      },
      {
        "name": "defaultMark",
        "comment": " ",
        "type": "Float -> Lines.Axis.Mark msg"
      },
      {
        "name": "defaultTick",
        "comment": " ",
        "type": "Lines.Axis.Tick msg"
      },
      {
        "name": "defaultTitle",
        "comment": " ",
        "type": "String -> Float -> Float -> Lines.Axis.Title msg"
      },
      {
        "name": "towardsZero",
        "comment": " ",
        "type": "Lines.Coordinate.Limits -> Float"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Lines.Coordinate",
    "comment": "\n\n# Frame\n@docs Frame, Size, Margin\n\n# Limits\n@docs Limits\n\n# System\n@docs System\n\n# Translation\n@docs Orientation\n\n## Single value\n@docs toSVG, toCartesian\n\n## Point\n@docs Point, toSVGPoint, toCartesianPoint\n\n## Scale\n@docs scaleSVG, scaleCartesian\n\n",
    "aliases": [
      {
        "name": "Frame",
        "comment": " Specifies the size and margins of your graphic.\n",
        "args": [],
        "type": "{ margin : Lines.Coordinate.Margin, size : Lines.Coordinate.Size }"
      },
      {
        "name": "Limits",
        "comment": " ",
        "args": [],
        "type": "{ min : Float, max : Float }"
      },
      {
        "name": "Margin",
        "comment": " ",
        "args": [],
        "type": "{ top : Float, right : Float, bottom : Float, left : Float }"
      },
      {
        "name": "Point",
        "comment": " ",
        "args": [],
        "type": "{ x : Float, y : Float }"
      },
      {
        "name": "Size",
        "comment": " ",
        "args": [],
        "type": "{ width : Float, height : Float }"
      },
      {
        "name": "System",
        "comment": " ",
        "args": [],
        "type": "{ frame : Lines.Coordinate.Frame , x : Lines.Coordinate.Limits , y : Lines.Coordinate.Limits }"
      }
    ],
    "types": [
      {
        "name": "Orientation",
        "comment": " ",
        "args": [],
        "cases": [
          [
            "X",
            []
          ],
          [
            "Y",
            []
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "scaleCartesian",
        "comment": " Scale a value from SVG to cartesian.\n",
        "type": "Lines.Coordinate.Orientation -> Lines.Coordinate.System -> Float -> Float"
      },
      {
        "name": "scaleSVG",
        "comment": " Scale a value from cartesian to SVG.\n",
        "type": "Lines.Coordinate.Orientation -> Lines.Coordinate.System -> Float -> Float"
      },
      {
        "name": "toCartesian",
        "comment": " Translate a value from SVG to cartesian.\n",
        "type": "Lines.Coordinate.Orientation -> Lines.Coordinate.System -> Float -> Float"
      },
      {
        "name": "toCartesianPoint",
        "comment": " ",
        "type": "Lines.Coordinate.System -> Lines.Coordinate.Point -> Lines.Coordinate.Point"
      },
      {
        "name": "toSVG",
        "comment": " Translate a value from cartesian to SVG.\n\n    toSVG X system point.x\n",
        "type": "Lines.Coordinate.Orientation -> Lines.Coordinate.System -> Float -> Float"
      },
      {
        "name": "toSVGPoint",
        "comment": " ",
        "type": "Lines.Coordinate.System -> Lines.Coordinate.Point -> Lines.Coordinate.Point"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Lines.Color",
    "comment": "\n\n# Colors\n@docs Color, pink, blue, orange, gray, transparent, black\n\n",
    "aliases": [
      {
        "name": "Color",
        "comment": " ",
        "args": [],
        "type": "String"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "black",
        "comment": " ",
        "type": "Lines.Color.Color"
      },
      {
        "name": "blue",
        "comment": " ",
        "type": "Lines.Color.Color"
      },
      {
        "name": "gray",
        "comment": " ",
        "type": "Lines.Color.Color"
      },
      {
        "name": "orange",
        "comment": " ",
        "type": "Lines.Color.Color"
      },
      {
        "name": "pink",
        "comment": " ",
        "type": "Lines.Color.Color"
      },
      {
        "name": "transparent",
        "comment": " ",
        "type": "Lines.Color.Color"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]